data.frame("Age" = input$age,
"Disease Probability" = input$disease_prob,
"Life Expectancy - Healthy Population" = round(e0_healthy, 2),
"Life Expectancy - Diseased Population" = round(e0_diseased, 2),
"Absolute Shortfall" = round(abs_shortfall, 2))
})
}
# Run app
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
# Read in life table data for Norway
norway_life_table <- read_csv(file.choose())
# Define UI
ui <- fluidPage(
titlePanel("Absolute Shortfall Calculator"),
sidebarLayout(
sidebarPanel(
numericInput("age", "Enter current age:", min = 0, max = 120, value = 50),
sliderInput("disease_prev", "Select disease prevalence:", min = 0, max = 1, value = 0.2, step = 0.01),
selectInput("gender", "Select gender:", choices = c("Male", "Female"), selected = "Male"),
selectInput("currency", "Select currency:", choices = c("NOK", "USD"), selected = "NOK"),
sliderInput("discount_rate", "Select discount rate:", min = 0, max = 1, value = 0.03, step = 0.001)
),
mainPanel(
h4("Results:"),
verbatimTextOutput("summary")
)
)
)
# Define server
server <- function(input, output) {
# Calculate absolute shortfall
output$summary <- renderPrint({
# Find row in life table corresponding to current age and gender
row_num <- which(norway_life_table$Age == input$age & norway_life_table$Gender == input$gender)
# Calculate expected remaining lifetime for healthy population
e0_healthy <- sum(norway_life_table[row_num:nrow(norway_life_table), "lx"] * norway_life_table[row_num:nrow(norway_life_table), "qx"]) / sum(norway_life_table[row_num:nrow(norway_life_table), "qx"])
# Calculate life expectancy for diseased population
norway_life_table_disease <- norway_life_table
norway_life_table_disease[row_num:nrow(norway_life_table_disease), "px"] <- input$disease_prev
norway_life_table_disease[row_num:nrow(norway_life_table_disease), "lx"] <- norway_life_table_disease[row_num:nrow(norway_life_table_disease), "lx"] * (1 - norway_life_table_disease[row_num:nrow(norway_life_table_disease), "px"])
e0_diseased <- sum(norway_life_table_disease[row_num:nrow(norway_life_table_disease), "lx"] * norway_life_table_disease[row_num:nrow(norway_life_table_disease), "qx"]) / sum(norway_life_table_disease[row_num:nrow(norway_life_table_disease), "qx"])
# Calculate absolute shortfall
abs_shortfall <- abs(e0_healthy - e0_diseased)
# Calculate present value of absolute shortfall
if (input$currency == "USD") {
pv_abs_shortfall <- abs_shortfall * 1.23^(-input$age) / (1 + input$discount_rate)^(input$age)
pv_abs_shortfall <- round(pv_abs_shortfall, 2)
} else {
pv_abs_shortfall <- abs_shortfall * (1 + input$discount_rate)^(-input$age)
pv_abs_shortfall <- round(pv_abs_shortfall, 2)
}
# Output results
paste("Absolute shortfall:", abs_shortfall, "years",
if (input$currency == "USD") "($" else "(", input$currency, " present value:",
if (input$currency == "USD") "$" else input$currency, pv_abs_shortfall, ")")
})
}
# Run app
shinyApp(ui = ui, server = server)
library(shiny)
library(readr)
# Read in life table data for Norway
norway_life_table <- read_csv(file.choose())
# Define UI
ui <- fluidPage(
titlePanel("Absolute Shortfall Calculator"),
sidebarLayout(
sidebarPanel(
numericInput("age", "Enter current age:", min = 0, max = 120, value = 50),
sliderInput("disease_prev", "Select disease prevalence:", min = 0, max = 1, value = 0.2, step = 0.01),
selectInput("gender", "Select gender:", choices = c("Male", "Female"), selected = "Male"),
selectInput("currency", "Select currency:", choices = c("NOK", "USD"), selected = "NOK"),
sliderInput("discount_rate", "Select discount rate:", min = 0, max = 1, value = 0.03, step = 0.001)
),
mainPanel(
h4("Results:"),
verbatimTextOutput("summary")
)
)
)
# Define server
server <- function(input, output) {
# Calculate absolute shortfall
output$summary <- renderPrint({
# Find row in life table corresponding to current age and gender
row_num <- which(norway_life_table$Age == input$age & norway_life_table$Gender == input$gender)
# Calculate expected remaining lifetime for healthy population
e0_healthy <- sum(norway_life_table[row_num:nrow(norway_life_table), "lx"] * norway_life_table[row_num:nrow(norway_life_table), "qx"]) / sum(norway_life_table[row_num:nrow(norway_life_table), "qx"])
# Calculate life expectancy for diseased population
norway_life_table_disease <- norway_life_table
norway_life_table_disease[row_num:nrow(norway_life_table_disease), "px"] <- input$disease_prev
norway_life_table_disease[row_num:nrow(norway_life_table_disease), "lx"] <- norway_life_table_disease[row_num:nrow(norway_life_table_disease), "lx"] * (1 - norway_life_table_disease[row_num:nrow(norway_life_table_disease), "px"])
e0_diseased <- sum(norway_life_table_disease[row_num:nrow(norway_life_table_disease), "lx"] * norway_life_table_disease[row_num:nrow(norway_life_table_disease), "qx"]) / sum(norway_life_table_disease[row_num:nrow(norway_life_table_disease), "qx"])
# Calculate absolute shortfall
abs_shortfall <- abs(e0_healthy - e0_diseased)
# Calculate present value of absolute shortfall
if (input$currency == "USD") {
pv_abs_shortfall <- abs_shortfall * 1.23^(-input$age) / (1 + input$discount_rate)^(input$age)
pv_abs_shortfall <- round(pv_abs_shortfall, 2)
} else {
pv_abs_shortfall <- abs_shortfall * (1 + input$discount_rate)^(-input$age)
pv_abs_shortfall <- round(pv_abs_shortfall, 2)
}
# Output results
paste("Absolute shortfall:", abs_shortfall, "years",
if (input$currency == "USD") "($" else "(", input$currency, " present value:",
if (input$currency == "USD") "$" else input$currency, pv_abs_shortfall, ")")
})
}
# Run app
shinyApp(ui = ui, server = server)
library(shinyuieditor)
launch_editor(app_loc = "C:/Github/qalynordics")
runApp('C:/Github/qalynordics')
# load required packages
library(shiny)
library(ggplot2)
library(dplyr)
# read in the life table data
life_table <- read.csv("norway_lifetable.csv")
# read in the life table data
life_table <- read.csv(file.choose())
# load required packages
library(shiny)
library(ggplot2)
library(dplyr)
# read in the life table data
life_table <- read.csv(file.choose())
# define the user interface
ui <- fluidPage(
# set the app title
titlePanel("QALY Shortfall Calculator"),
# define the input fields
sidebarLayout(
sidebarPanel(
# specify the minimum age to include in the analysis
sliderInput("min_age", "Minimum Age", min = min(life_table$age), max = max(life_table$age), value = 40),
# specify the maximum age to include in the analysis
sliderInput("max_age", "Maximum Age", min = min(life_table$age), max = max(life_table$age), value = 80),
# specify the EQ-5D-5L utility score
sliderInput("eq5d_util", "EQ-5D-5L Utility Score", min = 0, max = 1, value = 0.8),
# specify the required QALYs
sliderInput("qalys_required", "Required QALYs", min = 0, max = 10, value = 5)
),
# define the output plot
mainPanel(
plotOutput("waterfall_chart")
)
)
)
# define the server function
server <- function(input, output) {
# create age grid
age_grid <- seq(min(life_table$age), max(life_table$age))
# calculate QALY shortfall for each age
qaly_shortfall <- lapply(seq_along(age_grid), function(i) {
# calculate remaining life expectancy at each age
rem_le <- life_table[i, "ex"]
# calculate QALYs for each age using EQ-5D-5L utility score
qalys <- rem_le * input$eq5d_util
# calculate QALY shortfall at each age
shortfall <- ifelse(age_grid[i] >= input$min_age & age_grid[i] <= input$max_age,
max(0, input$qalys_required - qalys), 0)
return(shortfall)
})
# combine age grid and QALY shortfall into data frame
qaly_data <- data.frame(age = age_grid, shortfall = unlist(qaly_shortfall))
# calculate cumulative QALY shortfall
qaly_data$cumulative <- cumsum(qaly_data$shortfall)
# create waterfall chart
output$waterfall_chart <- renderPlot({
ggplot(qaly_data, aes(x = age, y = cumulative, fill = shortfall > 0)) +
geom_rect(aes(xmin = age - 0.5, xmax = age + 0.5, ymin = pmin(0, cumulative + shortfall), ymax = cumulative),
alpha = 0.8) +
scale_fill_manual(values = c("#9AC6C5", "#F98477")) +
scale_y_continuous(labels = scales::comma) +
labs(x = "Age", y = "Cumulative QALY Shortfall", fill = "Shortfall") +
theme_classic()
})
}
# run the app
shinyApp(ui, server)
library(shiny)
library(plotly)
# Define the UI
ui <- fluidPage(
titlePanel("QALY Absolute Shortfall and Waterfall Plot"),
sidebarLayout(
sidebarPanel(
numericInput("num_treatments", "Number of Treatments", value = 2, min = 2, max = 10),
uiOutput("treatment_inputs")
),
mainPanel(
plotlyOutput("waterfall_plot")
)
)
)
# Define the server
server <- function(input, output) {
# Generate the input fields for each treatment
output$treatment_inputs <- renderUI({
lapply(seq_len(input$num_treatments), function(i) {
fluidRow(
column(4, textInput(paste0("treatment_name_", i), "Treatment Name")),
column(4, numericInput(paste0("treatment_cost_", i), "Cost", value = 0)),
column(4, numericInput(paste0("treatment_qaly_", i), "QALY", value = 0))
)
})
})
# Calculate the QALY absolute shortfall for each treatment
qaly_shortfall <- reactive({
treatments <- sapply(seq_len(input$num_treatments), function(i) {
cost <- input[[paste0("treatment_cost_", i)]]
qaly <- input[[paste0("treatment_qaly_", i)]]
name <- input[[paste0("treatment_name_", i)]]
list(name = name, cost = cost, qaly = qaly)
})
ref_qaly <- min(treatments$qaly)
treatments$qaly_shortfall <- ref_qaly - treatments$qaly
treatments
})
# Generate the waterfall plot
output$waterfall_plot <- renderPlotly({
qaly_data <- qaly_shortfall()
qaly_data <- qaly_data[order(qaly_data$qaly_shortfall, decreasing = TRUE), ]
qaly_data$color <- ifelse(qaly_data$qaly_shortfall < 0, "red", "green")
fig <- plot_ly(qaly_data, type = "waterfall",
x = qaly_data$name,
y = qaly_data$qaly_shortfall,
text = paste0("QALY: ", qaly_data$qaly),
textposition = "inside",
connector = list(line = list(color = "#666666")),
increasing = list(marker = list(color = "green")),
decreasing = list(marker = list(color = "red")),
totals = list(marker = list(color = "blue", symbol = 102, line = list(color = "blue", width = 3))),
measure = list(line = list(color = "gray", width = 3, dash = "dash")))
fig <- fig %>% layout(title = "QALY Absolute Shortfall",
xaxis = list(title = "Treatment"),
yaxis = list(title = "QALY Shortfall"))
fig
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(reshape2)
# Create sample data
df <- data.frame(
Treatment = c("Treatment A", "Treatment B", "Treatment C", "Treatment D"),
Base_QALY = c(2.5, 2.5, 2.5, 2.5),
Incremental_QALY = c(0.5, 0.4, 0.3, 0.2),
Cost = c(1000, 1200, 1500, 2000)
)
# Melt the data to long format
df_melt <- melt(df, id.vars = "Treatment", variable.name = "Measure")
# Define the UI
ui <- fluidPage(
# Add the title
titlePanel("QALY Absolute Shortfall Calculator"),
# Add the sidebar
sidebarLayout(
sidebarPanel(
# Add inputs for the base QALY and the incremental QALY
numericInput(inputId = "base_qaly", label = "Base QALY:", value = 2.5),
numericInput(inputId = "inc_qaly", label = "Incremental QALY:", value = 0.5),
# Add a slider input for the cost
sliderInput(inputId = "cost", label = "Cost:",
min = 0, max = 10000, value = 1000, step = 1000)
),
# Add the main panel
mainPanel(
# Add the waterfall chart
plotOutput(outputId = "waterfall_chart", height = "600px"),
# Add a table to display the data
DT::dataTableOutput(outputId = "data_table")
)
)
)
# Define the server
server <- function(input, output) {
# Calculate the absolute shortfall
df_abs_shortfall <- reactive({
data.frame(
Treatment = c("Treatment A", "Treatment B", "Treatment C", "Treatment D"),
Absolute_Shortfall = input$base_qaly + input$inc_qaly - df$Base_QALY - df$Incremental_QALY,
Cost = df$Cost
)
})
# Render the waterfall chart
output$waterfall_chart <- renderPlot({
# Create the waterfall chart
ggplot(df_melt, aes(x = Treatment, y = value, fill = Measure)) +
geom_bar(stat = "identity", position = "identity") +
scale_fill_manual(values = c("#66c2a5", "#fc8d62", "#8da0cb")) +
coord_flip() +
theme_classic() +
labs(title = "QALY Absolute Shortfall Waterfall Chart",
y = "QALY",
fill = "") +
geom_segment(aes(x = as.numeric(factor(Treatment)) - 0.6,
xend = as.numeric(factor(Treatment)) + 0.6,
y = ifelse(Measure == "Base_QALY", value + input$base_qaly, value),
yend = ifelse(Measure == "Incremental_QALY", value + input$inc_qaly, value),
color = ifelse(value < 0, "red", "green"),
size = 1.5)) +
geom_text(aes(x = as.numeric(factor(Treatment)), y = ifelse(Measure == "Base_QALY", value + input$base_qaly, value),
label = ifelse(value < 0, paste0("Absolute Shortfall: ", round(-value, 2)), "")),
hjust = 0.5, vjust = ifelse(value < 0, 1, -0.5), size = 4) +
scale_y_continuous(labels = scales::comma_format()) +
guides(fill = guide_legend(reverse = TRUE))
})
# Render the data table
output$data_table <- DT::renderDataTable({
# Get the absolute shortfall data
df_abs_shortfall() %>%
mutate(Cost = scales::dollar(Cost)) %>%
select(Treatment, Absolute_Shortfall, Cost) %>%
DT::datatable(rownames = FALSE, escape = FALSE,
options = list(paging = FALSE, searching = FALSE))
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(reshape2)
# Create sample data
df <- data.frame(
Treatment = c("Treatment A", "Treatment B", "Treatment C", "Treatment D"),
Base_QALY = c(2.5, 2.5, 2.5, 2.5),
Incremental_QALY = c(0.5, 0.4, 0.3, 0.2),
Cost = c(1000, 1200, 1500, 2000)
)
# Melt the data to long format
df_melt <- melt(df, id.vars = "Treatment", variable.name = "Measure")
# Define the UI
ui <- fluidPage(
# Add the title
titlePanel("QALY Absolute Shortfall Calculator"),
# Add the sidebar
sidebarLayout(
sidebarPanel(
# Add inputs for the base QALY and the incremental QALY
numericInput(inputId = "base_qaly", label = "Base QALY:", value = 2.5),
numericInput(inputId = "inc_qaly", label = "Incremental QALY:", value = 0.5),
# Add a slider input for the cost
sliderInput(inputId = "cost", label = "Cost:",
min = 0, max = 10000, value = 1000, step = 1000)
),
# Add the main panel
mainPanel(
# Add the waterfall chart
plotOutput(outputId = "waterfall_chart", height = "600px"),
# Add a table to display the data
DT::dataTableOutput(outputId = "data_table")
)
)
)
server <- function(input, output) {
# Calculate the absolute shortfall data
df_abs_shortfall <- reactive({
# Get the QALY values
base_qaly <- input$base_qaly
inc_qaly <- input$inc_qaly
# Get the cost values
base_cost <- input$base_cost
inc_cost <- input$inc_cost
# Calculate the absolute shortfall for each treatment
df <- data.frame(Treatment = c("Base", "Incremental"),
Absolute_Shortfall = c(base_qaly - inc_qaly, 0),
Cost = c(base_cost, inc_cost))
# Order the treatments by absolute shortfall
df <- df[order(df$Absolute_Shortfall),]
# Return the data frame
df
})
# Render the Highcharts waterfall chart
output$waterfall <- renderHighchart({
# Get the absolute shortfall data
df <- df_abs_shortfall()
# Create the Highcharts chart
highchart() %>%
hc_chart(type = "waterfall") %>%
hc_title(text = "QALY Absolute Shortfall Waterfall Chart") %>%
hc_xAxis(categories = df$Treatment) %>%
hc_yAxis(title = list(text = "QALY")) %>%
hc_tooltip(pointFormat = "<b>{point.y:,.2f}</b> QALY") %>%
hc_plotOptions(waterfall = list(stemColor = "#666", dataLabels = list(enabled = TRUE))) %>%
hc_series(list(data = df$Absolute_Shortfall,
dataLabels = list(format = "${point.y:,.2f}"),
color = "#66c2a5")) %>%
hc_add_series(data = c(-df$Absolute_Shortfall[1], df$Absolute_Shortfall[2]),
dataLabels = list(format = "${point.y:,.2f}"),
color = "#fc8d62") %>%
hc_add_series(data = c(-df$Absolute_Shortfall[2], df$Absolute_Shortfall[1] + df$Absolute_Shortfall[2]),
dataLabels = list(format = "${point.y:,.2f}"),
color = "#8da0cb")
})
# Render the data table
output$data_table <- DT::renderDataTable({
# Get the absolute shortfall data
df_abs_shortfall() %>%
mutate(Cost = scales::dollar(Cost)) %>%
select(Treatment, Absolute_Shortfall, Cost) %>%
DT::datatable(rownames = FALSE, escape = FALSE,
options = list(paging = FALSE, searching = FALSE))
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(highcharter)
library(tidyverse)
library(highcharter)
library(reshape2)
# Create sample data
df <- data.frame(
Treatment = c("Treatment A", "Treatment B", "Treatment C", "Treatment D"),
Base_QALY = c(2.5, 2.5, 2.5, 2.5),
Incremental_QALY = c(0.5, 0.4, 0.3, 0.2),
Cost = c(1000, 1200, 1500, 2000)
)
# Melt the data to long format
df_melt <- melt(df, id.vars = "Treatment", variable.name = "Measure")
# Define the UI
ui <- fluidPage(
# Add the title
titlePanel("QALY Absolute Shortfall Calculator"),
# Add the sidebar
sidebarLayout(
sidebarPanel(
# Add inputs for the base QALY and the incremental QALY
numericInput(inputId = "base_qaly", label = "Base QALY:", value = 2.5),
numericInput(inputId = "inc_qaly", label = "Incremental QALY:", value = 0.5),
# Add a slider input for the cost
sliderInput(inputId = "cost", label = "Cost:",
min = 0, max = 10000, value = 1000, step = 1000)
),
# Add the main panel
mainPanel(
# Add the waterfall chart
plotOutput(outputId = "waterfall_chart", height = "600px"),
# Add a table to display the data
DT::dataTableOutput(outputId = "data_table")
)
)
)
server <- function(input, output) {
# Calculate the absolute shortfall data
df_abs_shortfall <- reactive({
# Get the QALY values
base_qaly <- input$base_qaly
inc_qaly <- input$inc_qaly
# Get the cost values
base_cost <- input$base_cost
inc_cost <- input$inc_cost
# Calculate the absolute shortfall for each treatment
df <- data.frame(Treatment = c("Base", "Incremental"),
Absolute_Shortfall = c(base_qaly - inc_qaly, 0),
Cost = c(base_cost, inc_cost))
# Order the treatments by absolute shortfall
df <- df[order(df$Absolute_Shortfall),]
# Return the data frame
df
})
# Render the Highcharts waterfall chart
output$waterfall <- renderHighchart({
# Get the absolute shortfall data
df <- df_abs_shortfall()
# Create the Highcharts chart
highchart() %>%
hc_chart(type = "waterfall") %>%
hc_title(text = "QALY Absolute Shortfall Waterfall Chart") %>%
hc_xAxis(categories = df$Treatment) %>%
hc_yAxis(title = list(text = "QALY")) %>%
hc_tooltip(pointFormat = "<b>{point.y:,.2f}</b> QALY") %>%
hc_plotOptions(waterfall = list(stemColor = "#666", dataLabels = list(enabled = TRUE))) %>%
hc_series(list(data = df$Absolute_Shortfall,
dataLabels = list(format = "${point.y:,.2f}"),
color = "#66c2a5")) %>%
hc_add_series(data = c(-df$Absolute_Shortfall[1], df$Absolute_Shortfall[2]),
dataLabels = list(format = "${point.y:,.2f}"),
color = "#fc8d62") %>%
hc_add_series(data = c(-df$Absolute_Shortfall[2], df$Absolute_Shortfall[1] + df$Absolute_Shortfall[2]),
dataLabels = list(format = "${point.y:,.2f}"),
color = "#8da0cb")
})
# Render the data table
output$data_table <- DT::renderDataTable({
# Get the absolute shortfall data
df_abs_shortfall() %>%
mutate(Cost = scales::dollar(Cost)) %>%
select(Treatment, Absolute_Shortfall, Cost) %>%
DT::datatable(rownames = FALSE, escape = FALSE,
options = list(paging = FALSE, searching = FALSE))
})
}
# Run the app
shinyApp(ui = ui, server = server)
x=2
print(x+x)
q()
install.packages(blogdown)
install.packages("blogdown")
library(blogdown)
blogdown::build_site()
shiny::runApp('C:/Github/shortfallshiny/SQSC')
ref_df = read.csv("https://github.com/bitowaqr/shortfall/raw/main/app/data/ref_df_appended.csv")
View(ref_df)
mvh_df = read.csv("https://github.com/bitowaqr/shortfall/raw/main/app/data/mvh_df.csv")
runApp('C:/Github/shortfallshiny/SQSC')
runApp('C:/Github/shortfallshiny/SQSC')
